{"version":3,"sources":["helpers/budget-math-helper.js","components/kpi-card.js","components/chart-card.js","components/navbar.js","helpers/chart-config-helper.js","App.js","serviceWorker.js","index.js"],"names":["formatter","Intl","NumberFormat","style","currency","removeCurrencySyntax","currencyAmountString","Number","replace","getCategoryValueMapFromData","budgetData","categoryValueMap","Map","i","length","categoryString","category","has","set","get","totalcost","getKeyValueArrayFromMap","dataMap","keyValueArray","mapKeys","keys","push","label","value","sort","a","b","getIncomeAndExpenseDataArrays","newIncomeItems","newExpenseItems","type","includes","incomeItems","expenseItems","getTotalsForIncomeExpenseAndGross","totalIncome","totalExpenses","typeString","tcNumber","totalGross","getCumulativeTotalPerDateArray","totalPerDateMap","date","cumulativeTotal","totalPerDateArray","dayA","split","dayB","addCurrencySyntax","number","format","getGrossCategoriesAndValues","dateToTotalMap","incomeItemIndex","expenseItemIndex","dateCategories","dateValues","keyIndex","categories","values","KPICard","cardTitle","className","id","BudgetMathHelper","defaultProps","ChartCard","chartTitle","chartConfig","customIconButtonStyle","makeStyles","customHoverFocus","backgroundColor","NavBar","iconButtonStyle","role","aria-label","aria-expanded","IconButton","href","size","color","bar2dConfig","chartData","dataType","width","dataFormat","dataSource","chart","numberPrefix","labelDisplay","slantLabel","showLabels","drawCrossLine","crossLineColor","crossLineAlpha","crossLineAnimation","showYAxisValues","numDivLines","divLineAlpha","labelFontSize","labelFontBold","valueFontBold","valueFontItalic","valueFontSize","chartLeftMargin","chartRightMargin","showPlotBorder","showBorder","showCanvasBorder","bgColor","bgAlpha","canvasBgColor","plotToolText","paletteColors","usePlotGradientColor","data","plotGradientColor","scrollArea2dConfig","chartCategories","chartValues","canvasLeftPadding","canvasTopPadding","canvasRightPadding","canvasBottomPadding","flatScrollBars","yAxisValueFontSize","showAlternativeVGridColor","showAlternateHGridColor","drawAnchors","anchorRadius","anchorBgColor","showValues","xAxisName","xAxisNameFontSize","plotFillColor","fontSize","fontBold","dataset","ReactFC","fcRoot","FusionCharts","Charts","App","processDataForUI","records","state","itemArrays","grossCumulativeData","expenseCategoryData","incomeCategoryData","setState","grossCumulativeChartData","ChartConfigHelper","expenseCategoryChartData","incomeCategoryChartData","ssID","process","apiKey","url","fetch","then","response","json","processGoogleSheetData","batchRowValues","valueRanges","rows","rowObject","j","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.32f00724.chunk.js","sourcesContent":["// Define formatter to format the amounts back to rand currency\nconst formatter = new Intl.NumberFormat('en-ZA', {\n  style: 'currency',\n  currency: 'ZAR',\n});\n\nfunction addCurrencySyntax(number) {\n  return formatter.format(number);\n}\n\nfunction removeCurrencySyntax(currencyAmountString) {\n  return Number(currencyAmountString.replace(/[^0-9.-]+/g, ''));\n}\n\nfunction getCategoryValueMapFromData(budgetData) {\n  const categoryValueMap = new Map();\n\n  for (let i = 0; i < budgetData.length; i += 1) {\n    // Add category to appropriate map depending on type\n    const categoryString = budgetData[i].category;\n    if (!categoryValueMap.has(categoryString)) {\n      categoryValueMap.set(categoryString, 0);\n    }\n    categoryValueMap.set(\n      categoryString,\n      categoryValueMap.get(categoryString)\n      + removeCurrencySyntax(budgetData[i].totalcost),\n    );\n  }\n\n  // Return category maps under appropriate headers\n  return categoryValueMap;\n}\n\nfunction getKeyValueArrayFromMap(dataMap) {\n  const keyValueArray = [];\n  const mapKeys = [...dataMap.keys()];\n  for (let i = 0; i < mapKeys.length; i += 1) {\n    keyValueArray.push({\n      label: mapKeys[i],\n      value: dataMap.get(mapKeys[i]),\n    });\n  }\n\n  // Sort key-value pairs according to value\n  keyValueArray.sort((a, b) => {\n    if (a.value < b.value) {\n      return 1;\n    }\n    if (b.value < a.value) {\n      return -1;\n    }\n    return 0;\n  });\n\n  return keyValueArray;\n}\n\nfunction getIncomeAndExpenseDataArrays(budgetData) {\n  const newIncomeItems = [];\n  const newExpenseItems = [];\n\n  for (let i = 0; i < budgetData.length; i += 1) {\n    // Add description/value based on data type\n    const typeString = budgetData[i].type;\n\n    if (typeString.includes('income')) newIncomeItems.push(budgetData[i]);\n    else newExpenseItems.push(budgetData[i]);\n  }\n\n  // Return income/expense arrays under appropriate headers\n  return { incomeItems: newIncomeItems, expenseItems: newExpenseItems };\n}\n\nfunction getTotalsForIncomeExpenseAndGross(budgetData) {\n  let totalIncome = 0;\n  let totalExpenses = 0;\n\n  for (let i = 0; i < budgetData.length; i += 1) {\n    const typeString = budgetData[i].type;\n\n    // Remove any funky currency-related parts from number\n    const tcNumber = removeCurrencySyntax(budgetData[i].totalcost);\n\n    // Add to income/expense total based on type\n    if (typeString.includes('income')) totalIncome += tcNumber;\n    else totalExpenses += tcNumber;\n  }\n\n  // Return the various totals under appropriate headers\n  return {\n    totalIncome,\n    totalExpenses,\n    totalGross: totalIncome - totalExpenses,\n  };\n}\n\nfunction getCumulativeTotalPerDateArray(budgetData) {\n  // Calculate and map totals per day\n  const totalPerDateMap = new Map();\n  for (let i = 0; i < budgetData.length; i += 1) {\n    if (!totalPerDateMap.has(budgetData[i].date)) {\n      totalPerDateMap.set(budgetData[i].date, 0);\n    }\n    totalPerDateMap.set(\n      budgetData[i].date,\n      totalPerDateMap.get(budgetData[i].date)\n      + removeCurrencySyntax(budgetData[i].totalcost),\n    );\n  }\n\n  // Calculate/add cumulative totals by iterating through map entries (new map with sorted entries)\n  let cumulativeTotal = 0;\n  const totalPerDateArray = [];\n\n  const mapKeys = [...totalPerDateMap.keys()];\n  mapKeys.sort((a, b) => {\n    // Date is string with DD/MM format\n    const dayA = Number(a.split('/')[0]);\n    const dayB = Number(b.split('/')[0]);\n\n    if (dayA > dayB) {\n      return 1;\n    }\n    if (dayB > dayA) {\n      return -1;\n    }\n    return 0;\n  });\n\n  for (let i = 0; i < mapKeys.length; i += 1) {\n    cumulativeTotal += totalPerDateMap.get(mapKeys[i]);\n    totalPerDateArray.push({\n      label: mapKeys[i],\n      value: cumulativeTotal,\n    });\n  }\n\n  return totalPerDateArray;\n}\n\nfunction getGrossCategoriesAndValues(incomeItems, expenseItems) {\n  const dateToTotalMap = new Map();\n\n  // Add income items to map\n  for (let incomeItemIndex = 0; incomeItemIndex < incomeItems.length; incomeItemIndex += 1) {\n    if (!dateToTotalMap.has(incomeItems[incomeItemIndex].date)) {\n      dateToTotalMap.set(incomeItems[incomeItemIndex].date, 0);\n    }\n    dateToTotalMap.set(\n      incomeItems[incomeItemIndex].date,\n      dateToTotalMap.get(incomeItems[incomeItemIndex].date)\n      + removeCurrencySyntax(incomeItems[incomeItemIndex].totalcost),\n    );\n  }\n\n  // Add expense items to map\n  for (let expenseItemIndex = 0; expenseItemIndex < expenseItems.length; expenseItemIndex += 1) {\n    if (!dateToTotalMap.has(expenseItems[expenseItemIndex].date)) {\n      dateToTotalMap.set(expenseItems[expenseItemIndex].date, 0);\n    }\n    dateToTotalMap.set(\n      expenseItems[expenseItemIndex].date,\n      dateToTotalMap.get(expenseItems[expenseItemIndex].date)\n      - removeCurrencySyntax(expenseItems[expenseItemIndex].totalcost),\n    );\n  }\n\n  // Sort map keys for processing\n  const mapKeys = [...dateToTotalMap.keys()];\n  mapKeys.sort((a, b) => {\n    // Date is string with DD/MM format\n    const dayA = Number(a.split('/')[0]);\n    const dayB = Number(b.split('/')[0]);\n\n    if (dayA > dayB) {\n      return 1;\n    }\n    if (dayB > dayA) {\n      return -1;\n    }\n    return 0;\n  });\n\n  // Construct array with cumulative totals from map\n  let cumulativeTotal = 0;\n  const dateCategories = [];\n  const dateValues = [];\n  for (let keyIndex = 0; keyIndex < mapKeys.length; keyIndex += 1) {\n    cumulativeTotal += dateToTotalMap.get(mapKeys[keyIndex]);\n    dateCategories.push({\n      label: mapKeys[keyIndex],\n    });\n    dateValues.push({\n      value: cumulativeTotal,\n    });\n  }\n\n  return { categories: dateCategories, values: dateValues };\n}\n\nexport default {\n  getCategoryValueMapFromData,\n  getKeyValueArrayFromMap,\n  getIncomeAndExpenseDataArrays,\n  getTotalsForIncomeExpenseAndGross,\n  getCumulativeTotalPerDateArray,\n  addCurrencySyntax,\n  getGrossCategoriesAndValues,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../../node_modules/bulma/css/bulma.css';\nimport BudgetMathHelper from '../helpers/budget-math-helper';\n\nconst KPICard = ({ cardTitle, value }) => (\n  <div className=\"card has-background-white-ter\">\n    <div className=\"card-content\">\n      <div className=\"has-text-weight-medium is-size-5\" id=\"card-title\">\n        {cardTitle}\n      </div>\n      <div className=\"has-text-weight-medium is-size-3\" id=\"card-val\">\n        {BudgetMathHelper.addCurrencySyntax(value)}\n      </div>\n    </div>\n  </div>\n);\n\nKPICard.propTypes = {\n  cardTitle: PropTypes.string,\n  value: PropTypes.number,\n};\n\nKPICard.defaultProps = {\n  cardTitle: 'cardTitle',\n  value: 0,\n};\n\nexport default KPICard;\n","import React from 'react';\nimport ReactFC from 'react-fusioncharts';\nimport PropTypes from 'prop-types';\nimport '../../node_modules/bulma/css/bulma.css';\n\nconst ChartCard = ({ chartTitle, chartConfig }) => (\n  <div className=\"card is-bottom-paddingless has-block-display has-background-white-ter\">\n    <div id=\"card-chart-content\" className=\"card-content\">\n      <div id=\"card-chart-title\" className=\"has-text-weight-medium is-size-5 has-text-centered\">\n        {chartTitle}\n      </div>\n      <ReactFC {...chartConfig} />\n    </div>\n  </div>\n);\n\nChartCard.propTypes = {\n  chartTitle: PropTypes.string,\n  chartConfig: PropTypes.instanceOf(Object),\n};\n\nChartCard.defaultProps = {\n  chartTitle: 'chartTitle',\n  chartConfig: null,\n};\n\nexport default ChartCard;\n","import React from 'react';\nimport '../../node_modules/bulma/css/bulma.css';\nimport '../App.css';\nimport IconButton from '../../node_modules/@material-ui/core/IconButton';\nimport GithubIcon from '../../node_modules/@material-ui/icons/GitHub';\nimport LinkedinIcon from '../../node_modules/@material-ui/icons/LinkedIn';\nimport { makeStyles } from '../../node_modules/@material-ui/core/styles';\n\nconst customIconButtonStyle = makeStyles(() => ({\n  customHoverFocus: {\n    '&:hover, &.Mui-focusVisible': { backgroundColor: 'white' },\n  },\n}));\n\nconst NavBar = () => {\n  const iconButtonStyle = customIconButtonStyle();\n  return (\n    <nav\n      className=\"navbar is-spaced is-fixed-top has-background-black-ter has-text-light\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"navbar-brand\" aria-label=\"menu\" aria-expanded=\"false\">\n        <div className=\"navbar-item is-size-5 has-text-weight-semibold has-text-light\">\n          Budget Dashboard\n        </div>\n        <div className=\"navbar-align-end\">\n          <IconButton\n            className={iconButtonStyle.customHoverFocus}\n            href=\"https://github.com/BrandonHo\"\n            size=\"medium\"\n            color=\"inherit\"\n          >\n            <GithubIcon />\n          </IconButton>\n          <IconButton\n            className={iconButtonStyle.customHoverFocus}\n            href=\"https://www.linkedin.com/in/brandon-ho-za/\"\n            size=\"medium\"\n            color=\"inherit\"\n          >\n            <LinkedinIcon />\n          </IconButton>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default NavBar;\n","function bar2dConfig(chartData, dataType) {\n  const chartConfig = {\n    type: 'bar2d',\n    width: '100%',\n    dataFormat: 'json',\n    dataSource: {\n      chart: {\n        numberPrefix: 'R',\n        labelDisplay: 'rotate',\n        slantLabel: '1',\n        showLabels: '1',\n        drawCrossLine: '1',\n        crossLineColor: '#000000',\n        crossLineAlpha: '15',\n        crossLineAnimation: '1',\n        showYAxisValues: '0',\n        numDivLines: '0',\n        divLineAlpha: '0',\n        labelFontSize: '12',\n        labelFontBold: '0',\n        valueFontBold: '1',\n        valueFontItalic: '1',\n        valueFontSize: '15',\n        chartLeftMargin: '0',\n        chartRightMargin: '0',\n        showPlotBorder: '0',\n        showBorder: '0',\n        showCanvasBorder: '0',\n        bgColor: '#F5F5F5',\n        bgAlpha: '100',\n        canvasBgColor: '#F5F5F5',\n        plotToolText: '<b>$label: $dataValue</b>',\n        paletteColors: '#000000',\n        usePlotGradientColor: '1',\n      },\n      data: chartData,\n    },\n  };\n\n  // Select/apply color based on data type\n  if (dataType.includes('income')) {\n    chartConfig.dataSource.chart.paletteColors = '#66bb6a';\n    chartConfig.dataSource.chart.plotGradientColor = '#a5d6a7';\n  } else if (dataType.includes('expense')) {\n    chartConfig.dataSource.chart.paletteColors = '#ef5350';\n    chartConfig.dataSource.chart.plotGradientColor = '#ff867c';\n  }\n\n  return chartConfig;\n}\n\nfunction scrollArea2dConfig(chartCategories, chartValues) {\n  return {\n    type: 'scrollarea2d',\n    width: '100%',\n    dataFormat: 'json',\n    dataSource: {\n      chart: {\n        numberPrefix: 'R',\n        labelDisplay: 'Auto',\n        slantLabel: '1',\n        showLabels: '1',\n        showBorder: '0',\n        bgColor: '#F5F5F5',\n        bgAlpha: '100',\n        canvasBgColor: '#F5F5F5',\n        canvasLeftPadding: '15',\n        canvasTopPadding: '0',\n        canvasRightPadding: '20',\n        canvasBottomPadding: '0',\n        chartLeftMargin: '0',\n        chartRightMargin: '0',\n        flatScrollBars: '1',\n        drawCrossLine: '1',\n        crossLineColor: '#000000',\n        crossLineAlpha: '15',\n        showPlotBorder: '0',\n        yAxisValueFontSize: '12',\n        showAlternativeVGridColor: '0',\n        showAlternateHGridColor: '0',\n        divLineAlpha: '25',\n        numDivLines: '4',\n        drawAnchors: '1',\n        anchorRadius: '5',\n        anchorBgColor: '#66bb6a',\n        showValues: '0',\n        xAxisName: 'Date (Day/Month)',\n        xAxisNameFontSize: '10',\n        showYAxisValues: '1',\n        showCanvasBorder: '0',\n        plotFillColor: '#d7ffd9',\n        plotGradientColor: '#a5d6a7',\n        usePlotGradientColor: '1',\n        plotToolText: '<b>$label: $dataValue</b>',\n      },\n      categories: [\n        {\n          fontSize: '15',\n          fontBold: '1',\n          category: chartCategories,\n        },\n      ],\n      dataset: [\n        {\n          data: chartValues,\n        },\n      ],\n    },\n  };\n}\n\nexport default {\n  bar2dConfig,\n  scrollArea2dConfig,\n};\n","import React, { Component } from 'react';\nimport './App.css';\nimport '../node_modules/bulma/css/bulma.css';\nimport Charts from 'fusioncharts/fusioncharts.charts';\nimport FusionCharts from 'fusioncharts';\nimport ReactFC from 'react-fusioncharts';\nimport KPICard from './components/kpi-card';\nimport ChartCard from './components/chart-card';\nimport Navbar from './components/navbar';\nimport ChartConfigHelper from './helpers/chart-config-helper';\nimport BudgetMathHelper from './helpers/budget-math-helper';\nimport DummyDataHelper from './helpers/dummy-data-helper';\n\nReactFC.fcRoot(FusionCharts, Charts);\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      records: [],\n      totalIncome: 0,\n      totalExpenses: 0,\n      totalGross: 0,\n      grossCumulativeChartData: null,\n      incomeCategoryChartData: null,\n      expenseCategoryChartData: null,\n    };\n  }\n\n  componentDidMount() {\n    const ssID = process.env.REACT_APP_SS_ID;\n    const apiKey = process.env.REACT_APP_API_KEY;\n\n    // If ID or api key not found - load dummy data\n    if ((ssID === undefined) || (apiKey === undefined)) {\n      this.processGoogleSheetData(DummyDataHelper.generateDummyData());\n    } else {\n      // Define get method url, process callback for data\n      const url = `https://sheets.googleapis.com/v4/spreadsheets/${ssID}/values:batchGet?ranges=Budget&majorDimension=ROWS&key=${apiKey}`;\n      fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          this.processGoogleSheetData(data);\n        });\n    }\n  }\n\n  processDataForUI = () => {\n    // Reference current records in state\n    const { records } = this.state;\n\n    // Use helper to calculate/format data from records\n    const budgetData = BudgetMathHelper.getTotalsForIncomeExpenseAndGross(\n      records,\n    );\n    const itemArrays = BudgetMathHelper.getIncomeAndExpenseDataArrays(records);\n    const grossCumulativeData = BudgetMathHelper.getGrossCategoriesAndValues(\n      itemArrays.incomeItems,\n      itemArrays.expenseItems,\n    );\n    const expenseCategoryData = BudgetMathHelper.getKeyValueArrayFromMap(\n      BudgetMathHelper.getCategoryValueMapFromData(itemArrays.expenseItems),\n    );\n    const incomeCategoryData = BudgetMathHelper.getKeyValueArrayFromMap(\n      BudgetMathHelper.getCategoryValueMapFromData(itemArrays.incomeItems),\n    );\n\n    // Update state with new amount variables\n    this.setState({\n      totalIncome: budgetData.totalIncome,\n      totalExpenses: budgetData.totalExpenses,\n      totalGross: budgetData.totalGross,\n      grossCumulativeChartData: ChartConfigHelper.scrollArea2dConfig(\n        grossCumulativeData.categories,\n        grossCumulativeData.values,\n      ),\n      expenseCategoryChartData: ChartConfigHelper.bar2dConfig(expenseCategoryData, 'expense'),\n      incomeCategoryChartData: ChartConfigHelper.bar2dConfig(incomeCategoryData, 'income'),\n    });\n  };\n\n  processGoogleSheetData(data) {\n    // Process data into appropriate objects\n    const batchRowValues = data.valueRanges[0].values;\n    const rows = [];\n    for (let i = 1; i < batchRowValues.length; i += 1) {\n      const rowObject = {};\n      for (let j = 0; j < batchRowValues[i].length; j += 1) {\n        rowObject[batchRowValues[0][j]] = batchRowValues[i][j];\n      }\n      rows.push(rowObject);\n    }\n\n    // Set records in state, then process for UI purposes\n    this.setState({ records: rows }, () => this.processDataForUI());\n  }\n\n  render() {\n    const {\n      totalIncome,\n      totalExpenses,\n      totalGross,\n      grossCumulativeChartData,\n      expenseCategoryChartData,\n      incomeCategoryChartData,\n    } = this.state;\n    return (\n      <div className=\"app has-background-grey-dark\">\n        <Navbar />\n        <div className=\"container is-fullhd has-fixed-navbar-top-padding\">\n          <section className=\"section is-bottom-paddingless\">\n            <div className=\"columns\">\n              <div className=\"column\">\n                <KPICard\n                  cardTitle=\"Expenses\"\n                  value={totalExpenses}\n                />\n              </div>\n              <div className=\"column\">\n                <KPICard\n                  cardTitle=\"Gross\"\n                  value={totalGross}\n                />\n              </div>\n              <div className=\"column\">\n                <KPICard\n                  cardTitle=\"Income\"\n                  value={totalIncome}\n                />\n              </div>\n            </div>\n          </section>\n\n          <section className=\"section is-next-section is-bottom-paddingless\">\n            <div className=\"columns is-multiline\">\n              <div className=\"column is-full is-tablet is-mobile\">\n                <ChartCard\n                  chartTitle=\"Gross Balance Per Date\"\n                  chartConfig={grossCumulativeChartData}\n                />\n              </div>\n              <div className=\"column is-half-fullhd is-half-desktop is-tablet is-mobile\">\n                <ChartCard\n                  chartTitle=\"Expense Categories\"\n                  chartConfig={expenseCategoryChartData}\n                />\n              </div>\n              <div className=\"column is-half-fullhd is-half-desktop is-tablet is-mobile\">\n                <ChartCard\n                  chartTitle=\"Income Categories\"\n                  chartConfig={incomeCategoryChartData}\n                />\n              </div>\n            </div>\n          </section>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}